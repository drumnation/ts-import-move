{
    "name": "project-context",
    "description": "Initialize project context from .brain documentation",
    "rules": [
        {
            "pattern": "**/*",
            "context": [
                {
                    "source": ".brain/project-overview.md",
                    "description": "Project overview documentation",
                    "weight": 1.0
                },
                {
                    "source": ".brain/project-plan.md",
                    "description": "Project planning documentation",
                    "weight": 1.0
                },
                {
                    "source": ".brain/directory-structure.md",
                    "description": "Directory structure documentation",
                    "weight": 1.0
                }
            ]
        }
    ]
}

# ./.cursor/rules/agent-use-project-docs.rules.mdc

```mdc
---
description: 
globs: 
alwaysApply: true
---
# Rule: Agent Use of Project Documentation

## Purpose
Ensure that agents actively reference existing project documentation during planning, implementation, and debugging. This reinforces architecture decisions, prevents duplication, and leverages prior domain knowledge.

---

## When to Read Docs

Agents MUST consult relevant documentation:

- Before implementing or planning a new feature  
- Before debugging a non-trivial issue  
- When using or modifying any shared component, service, or utility  
- When setting up a new app, package, or configuration  
- When unsure about naming, architecture, or design patterns

---

## What to Read

Agents should prioritize:

- `docs/features/` — Feature implementation and rationale  
- `docs/architecture/adr/` — Architectural decisions  
- `docs/concepts/` — Core patterns and abstractions  
- `docs/packages/[name]/` — Workspace-specific details  
- `README.md`, `ONBOARDING.md`, `CONTRIBUTING.md` — Setup and standards  

Use index files (`*.index.md`) to navigate efficiently.

---

## Usage Expectations

- ✅ Reference relevant documents in the plan or task file  
- ✅ Reuse prior design decisions and avoid re-debating settled architecture  
- ✅ Cross-link helpful docs in responses where appropriate  
- ✅ Load related `.md` files into memory when working on relevant code  
- ✅ If unclear, run the `consult-documentation-index` process to search  

---

## Related Rules

- @project-documentation-structure.rules.mdc  
- @feature-task-plan-generator.rules.mdc  
- @agent-self-report.rules.mdc

```


# ./.cursor/rules/automatic-git-commit.rules.mdc

```mdc
---
description: 
globs: 
alwaysApply: true
---
# Rule: Automatic Git Commit Rules

Purpose:
Automatically commit staged changes at logical points in development using conventional commits and metadata logging.

Trigger Conditions:
- A feature, function, test, or refactor is logically complete
- Total changed lines exceed 300 (across all files)
- More than 8 files are staged
- A stable group of files is complete (e.g. component + styles + test)
- A previously failing test now passes due to these changes
- A `.rules`, `README.md`, or config file has been modified

Commit Message Structure:
1. `commitSubject` (max 50 chars, required): One-line summary using Conventional Commit format (e.g., `feat: add login screen`)
2. `commitBody` (optional): Wrap lines to ~72 chars, summarize key changes, bullet major additions if needed.
3. `commitFooter` (optional): For breaking changes or issue refs (e.g., `BREAKING CHANGE:` or `Closes #123`)

Commit Process:
1. Analyze `git diff` or fallback to `git status` + file list
2. Generate structured commit message: `Subject`, `Body`, `Footer`
3. Stage all changes explicitly: `git add -- ${changedFilesList.join(' ')}`
4. Commit using:
   ```bash
   echo "${fullMessage}" | git commit -F -
   ```

Metadata Logging:
- After successful commit, retrieve the hash:
  ```bash
  git rev-parse HEAD
  ```
- Create a metadata JSON file at `.brain/git/commits/[xx]/[hash].json` with:
  ```json
  {
    "hash": "<commit hash>",
    "messageSubject": "<subject>",
    "messageBody": "<body>",
    "messageFooter": "<footer>",
    "files": [<file list>],
    "timestamp": "<UTC timestamp>",
    "branch": "<branch name>"
  }
  ```
- Create parent directories with `mkdir -p` as needed.

Commit Policy Notes:
- Skip automatic commit if:
  - Files contain WIP, TODO, or FIXME comments
  - Code is not in a logically complete state
- Prefer small, atomic commits
- Avoid committing unrelated changes together

Final Output:
- Return only:
  ```json
  {
    "commitHash": "<commit hash>",
    "metadataPath": "<path to metadata file>"
  }
  ```
```
```


# ./.cursor/rules/changelog.rules.mdc

```mdc
---
description: 
globs: 
alwaysApply: true
---
# Changelog Management Rules

## Changelog Purpose & Standards

This file provides rules for managing changelog files within the project-brain-monorepo.

### Format Standards
- All changelogs MUST follow [Keep a Changelog](mdc:https:/keepachangelog.com/en/1.0.0) format
- Version numbers MUST adhere to [Semantic Versioning](mdc:https:/semver.org/spec/v2.0.0.html)
- Each package MUST maintain its own CHANGELOG.md in its root directory

## Required Structure

```markdown
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](mdc:https:/keepachangelog.com/en/1.0.0),
and this project adheres to [Semantic Versioning](mdc:https:/semver.org/spec/v2.0.0.html).

## [Unreleased]

### Added
- New features

### Changed
- Changes to existing functionality

### Deprecated
- Soon-to-be removed features

### Removed
- Removed features

### Fixed
- Bug fixes

### Security
- Vulnerability fixes

## [x.y.z] - YYYY-MM-DD
```

## Change Categories

1. **Added** - New features
2. **Changed** - Changes to existing functionality
3. **Deprecated** - Soon-to-be removed features
4. **Removed** - Removed features
5. **Fixed** - Bug fixes
6. **Security** - Vulnerability fixes

## Workflow Rules

### Adding New Changes
1. ✅ ALWAYS add changes to the [Unreleased] section first
2. ✅ ALWAYS include a concise description of the change
3. ✅ ALWAYS categorize changes correctly
4. ⛔ NEVER add the same change multiple times
5. ✅ ALWAYS maintain chronological order within each category (newest at top)

### Release Process
1. ✅ ALWAYS get the current date using terminal command: `date +'%Y-%m-%d'`
2. ✅ ALWAYS move [Unreleased] content to a new version section with the date
3. ✅ ALWAYS create an empty [Unreleased] section after a release
4. ✅ ALWAYS include links to compare versions (at bottom of file)
5. ✅ ALWAYS update the version in package.json to match the new release version

## Version Management

### Package.json Synchronization
1. ✅ ALWAYS update package.json version when creating a new release
2. ✅ ALWAYS ensure package.json version and CHANGELOG.md version match exactly
3. ⛔ NEVER have mismatched versions between package.json and CHANGELOG.md
4. ✅ ALWAYS update both files in the same commit

### Version Update Command
```bash
# Update version in package.json
npm version [major|minor|patch] --no-git-tag-version
```

### Version Validation
Before release, run the following command to verify consistency:
```bash
node -e "const pkg = require('./package.json'); const fs = require('fs'); const cl = fs.readFileSync('./CHANGELOG.md', 'utf8'); const match = cl.match(/## \[([\d\.]+)\]/); console.log(pkg.version === match[1] ? 'Versions match ✅' : 'Version mismatch! ❌');"
```

## Version Numbering

1. **Major (x.0.0)** - Incompatible API changes
2. **Minor (0.x.0)** - Backwards-compatible functionality additions
3. **Patch (0.0.x)** - Backwards-compatible bug fixes

## Pre-Commit Validation

Before committing changelog changes:
1. Verify sections are in the correct order
2. Ensure all entries are properly categorized
3. Check that version follows semantic versioning
4. Verify date is dynamically generated using terminal
5. Confirm all entries are clear and concise
6. Verify package.json version matches CHANGELOG.md version

## Release Checklist

1. Move [Unreleased] items to new version section
2. Add current date using `date +'%Y-%m-%d'` command
3. Update package.json version to match new CHANGELOG.md version
4. Create empty [Unreleased] section
5. Update version comparison links at bottom of file
6. Commit both CHANGELOG.md and package.json together

```


# ./.cursor/rules/code-standards.rules.mdc

```mdc
---
description: 
globs: 
alwaysApply: true
---
**Core Principles:**

1.  **Readability and Maintainability:** Prioritize code that is easy to understand and modify.
2.  **Modularity:** Break down large components into smaller, manageable modules.
3.  **Testability:** Ensure that code is easily testable.
4.  **Performance:** Optimize code for efficiency.
5.  **Consistency:** Adhere to established coding standards and patterns.
6.  **Proactive Refactoring:** Address code complexity and length early.

**Cursor Ruleset (Node.js/TypeScript):**

**1. File Length and Refactoring:**

* **Rule:** "Monitor all `.ts` and `.js` files. When a file exceeds 500 lines, initiate a refactoring process to break down the file into smaller, more focused modules or classes. Prioritize extracting logically related code blocks into separate files or functions."
* **Action:**
    * "Analyze the file to identify logical units of functionality."
    * "Create new files or modules for these units, ensuring clear separation of concerns."
    * "Update import/export statements to maintain functionality."
    * "Ensure all extracted code is thoroughly tested."
    * "Provide a summary of the refactoring steps taken and the rationale behind them."

**2. Module Structure and Organization:**

* **Rule:** "Organize code into logical modules based on functionality. Utilize the `src/` directory for source code and `test/` for tests. Create subdirectories within `src/` to represent different features or components."
* **Action:**
    * "Ensure that related files are grouped together in subdirectories."
    * "Use `index.ts` files to aggregate exports from subdirectories, providing a clean API for other modules."
    * "Maintain a clear and consistent file naming convention."

**3. Function and Class Design:**

* **Rule:** "Functions and classes should have a single responsibility. Keep functions short and focused. Classes should encapsulate related data and behavior."
* **Action:**
    * "Refactor long functions into smaller, more manageable functions."
    * "Extract common logic into reusable functions or classes."
    * "Adhere to the Single Responsibility Principle (SRP)."
    * "Use descriptive names for functions and classes."
    * "Use typescript interfaces to define the shape of objects."

**4. Error Handling:**

* **Rule:** "Implement robust error handling using `try...catch` blocks and custom error classes. Log errors with sufficient context for debugging."
* **Action:**
    * "Wrap potentially error-prone code in `try...catch` blocks."
    * "Create custom error classes for specific error scenarios."
    * "Log errors with timestamps, file names, and line numbers."
    * "Avoid throwing generic errors, provide useful error messages."

**5. Asynchronous Operations:**

* **Rule:** "Use `async/await` for asynchronous operations. Avoid callback hell. Implement proper error handling for asynchronous code."
* **Action:**
    * "Prefer `async/await` over callbacks or promises."
    * "Use `try...catch` blocks within `async` functions to handle errors."
    * "Validate inputs and outputs of async functions."

**6. Testing:**

* **Rule:** "Write comprehensive unit tests for all code. Use a testing framework like Jest or Mocha. Aim for 100% test coverage, especially for critical modules."
* **Action:**
    * "Create test files in the `test/` directory, mirroring the `src/` directory structure."
    * "Use mocking and stubbing to isolate units of code."
    * "Write tests for edge cases and error scenarios."
    * "Use code coverage tools to measure test effectiveness."

**7. Code Style and Linting:**

* **Rule:** "Adhere to a consistent code style using ESLint and Prettier. Configure these tools to enforce coding standards and automatically format code."
* **Action:**
    * "Install and configure ESLint and Prettier with appropriate rules."
    * "Integrate linting and formatting into the development workflow (e.g., using Git hooks or CI/CD pipelines)."
    * "Use a consistent indentation style, and consistent use of semicolons."

**8. Documentation:**

* **Rule:** "Document code using JSDoc comments. Provide clear and concise explanations for functions, classes, and modules."
* **Action:**
    * "Add JSDoc comments to all public functions, classes, and interfaces."
    * "Explain the purpose, parameters, and return values of functions."
    * "Document complex logic and algorithms."
* "Create README files for modules and projects."

**Cursor Prompts (Examples):**

* "Analyze `src/utils.ts`. If it exceeds 500 lines, refactor it into smaller modules. Create new files in `src/utils/` for each module. Update imports and exports accordingly. Provide a summary of the refactoring."
* "Refactor the `getUserData` function in `src/api.ts` to improve readability and maintainability. Ensure that all asynchronous operations are handled using `async/await` and that errors are properly logged."
* "Write unit tests for the `calculateTotal` function in `src/cart.ts`. Aim for 100% test coverage. Use Jest for testing."
* "Add JSDoc comments to all public functions and classes in `src/services/userService.ts`. Explain the purpose, parameters, and return values."
* "Configure ESLint and Prettier for this project. Enforce consistent code style and automatically format code. Create a `.eslintrc.js` and `.prettierrc.js` file."

**Key Considerations:**

* **Iterative Refactoring:** Refactoring should be an ongoing process, not a one-time event.
* **Human Oversight:** while Cursor can do much of the work, human review is still needed to ensure quality.
* **Context Awareness:** Cursor needs to be aware of the project's overall architecture and design patterns.

By implementing this ruleset, you can significantly improve the quality, maintainability, and scalability of your Node.js/TypeScript projects.

```


# ./.cursor/rules/contributing.rules.mdc

```mdc
---
description: 
globs: 
alwaysApply: true
---
# Rule: Auto-generate and maintain CONTRIBUTING.md

Purpose:
Keep CONTRIBUTING.md up-to-date with current dev workflow, project setup, branching strategy, and code standards.

When to run:
- When new scripts, packages, or commands are added
- When Git branching or PR flow changes
- When testing, linting, or formatting tools are updated

Include:
- Setup steps (pnpm, env vars, Docker/Colima, etc.)
- Gitflow instructions
- Dev standards (hooks, styled-components, test-first)
- How to run tests, lint, and format
- PR submission guidelines

Format:
Markdown with fenced code blocks and concise section headers.

```


# ./.cursor/rules/date-time.rules.mdc

```mdc
---
description: 
globs: 
alwaysApply: true
---
## Date Command Usage:
```bash
# For full timestamps (ALWAYS use this format for document headers and meeting notes):
date +'%A, %B %d, %Y at %I:%M:%S %p'

# For date-only fields:
date +'%Y-%m-%d'

# For log timestamps:
date +'%Y-%m-%d %H:%M:%S'
```

## Common Scenarios Requiring Date Generation:
1. Creating/updating documents
2. Writing meeting notes
3. Setting "Last Updated" timestamps
4. Recording creation dates
5. Dating project milestones
6. Setting review dates
7. Adding timestamps to logs

## Validation Steps:
Before completing ANY task involving dates:
1. Search for date fields that need updating
2. Run date command for each field
3. Update ALL dates using command output
4. Verify no hardcoded dates remain

## Examples:

✅ CORRECT:
```markdown
# Meeting Notes
## $(date +'%A, %B %d, %Y at %I:%M:%S %p')
```

❌ INCORRECT:
- Copying dates from other files
- Using hardcoded dates
- Leaving dates unchanged
- Making assumptions about current date
```


# ./.cursor/rules/file-organization.mdc

```mdc
---
description: Defines the file organization structure for TypeScript projects, emphasizing modularity and separation of concerns.
globs: **/*.ts
---
- Group related functionality into modules
- Use index files to simplify imports
- Separate concerns: keep business logic, UI components, and utilities in different directories
```


# ./.cursor/rules/functional-test-principals.rules.mdc

```mdc
---
description: 
globs: 
alwaysApply: true
---
# Rule: Functional Test Principles

Purpose:
Ensure all test suites — regardless of test framework — validate real, end-to-end or integration-level functionality. Tests must act as a backstop for the app. If they pass, the app works. If they fail, something meaningful is broken. This allows the agent to self-validate and iterate safely.

Frameworks: Mocha, Vitest, Jest, Playwright, Cypress, Storybook, etc.  
The principles apply across all test environments.

Agent Behavior:

1. **Test Real Use, Not Implementation**
   - Simulate real usage, not internals
   - Validate user-visible outputs or API responses
   - Never test internal method calls, hook behavior, or prop structures directly

2. **Avoid Mocking**
   - Mock only:
     - External APIs (e.g., HTTP requests)
     - Uncontrollable globals (e.g., time, environment)
   - Never mock internal app logic or structure just to make a test work
   - Avoid testing `.mock.calls` or `spyOn()` unless testing infrastructure-level effects

3. **One-to-One Principle**
   - If the test passes → the feature works
   - If the test fails → the feature is broken, misaligned, or needs to be updated with intention

4. **Tests Should Be Lightweight and Runnable Often**
   - Run them after every meaningful code change
   - Favor a small number of high-signal tests over hundreds of shallow coverage tests

5. **Use for Self-Validation**
   - The agent should use tests as the basis for confirming its changes are correct
   - No agent-generated code should be considered complete until the relevant tests pass

6. **Do Not Over-Isolate**
   - Avoid deep mocking that isolates a function from its context
   - Prefer integration and functional tests for most features
   - Unit tests should be used only for pure functions or small reusable utilities

7. **Include Test Planning in Feature Design**
   - When writing a plan for any task or feature, include:
     - What needs to be tested
     - How it can be tested without mocks
     - What defines success/failure

8. **Failure ≠ Delete**
   - If a test fails, investigate
   - Fix the code if it’s a regression
   - Update the test only after understanding the cause
   - Never delete or bypass a test just to make the suite green

ruleType: always

# Rule: Functional Test Principles

Purpose:
Ensure all test suites — regardless of test framework — validate real, end-to-end or integration-level functionality. Tests must act as a backstop for the app. If they pass, the app works. If they fail, something meaningful is broken. This allows the agent to self-validate and iterate safely.

Frameworks: Mocha, Vitest, Jest, Playwright, Cypress, Storybook, etc.  
The principles apply across all test environments.

Agent Behavior:

1. **Test Real Use, Not Implementation**
   - Simulate real usage, not internals
   - Validate user-visible outputs or API responses
   - Never test internal method calls, hook behavior, or prop structures directly

2. **Avoid Mocking**
   - Mock only:
     - External APIs (e.g., HTTP requests)
     - Uncontrollable globals (e.g., time, environment)
   - Never mock internal app logic or structure just to make a test work
   - Avoid testing `.mock.calls` or `spyOn()` unless testing infrastructure-level effects

3. **One-to-One Principle**
   - If the test passes → the feature works
   - If the test fails → the feature is broken, misaligned, or needs to be updated with intention

4. **Tests Should Be Lightweight and Runnable Often**
   - Run them after every meaningful code change
   - Favor a small number of high-signal tests over hundreds of shallow coverage tests

5. **Use for Self-Validation**
   - The agent should use tests as the basis for confirming its changes are correct
   - No agent-generated code should be considered complete until the relevant tests pass

6. **Do Not Over-Isolate**
   - Avoid deep mocking that isolates a function from its context
   - Prefer integration and functional tests for most features
   - Unit tests should be used only for pure functions or small reusable utilities

7. **Include Test Planning in Feature Design**
   - When writing a plan for any task or feature, include:
     - What needs to be tested
     - How it can be tested without mocks
     - What defines success/failure

8. **Failure ≠ Delete**
   - If a test fails, investigate
   - Fix the code if it’s a regression
   - Update the test only after understanding the cause
   - Never delete or bypass a test just to make the suite green

# Rule: Detect Active Test Framework

Trigger: When a test plan or test execution step is needed

Behavior:
- Look for known files:
  - `vitest.config.ts`
  - `.mocharc.js`
  - `jest.config.js`
  - `playwright.config.ts`
- Or scan `package.json` for:
  - Installed devDependencies
- Or prompt the user: “What test framework should I use here?”


```


# ./.cursor/rules/onboarding.rules.mdc

```mdc
---
description: 
globs: 
alwaysApply: true
---
# Rule: Auto-generate and maintain ONBOARDING.md

Purpose:
Provide new developers with an always up-to-date guide to set up their environment and get running fast.

When to run:
- When environment requirements change (e.g., Node version, Docker setup)
- When onboarding steps change (e.g., new .env vars, setup commands)
- When any new app or package is added that needs manual linking or config

Include:
- Prerequisites (OS, tools, package managers)
- Environment setup (.env, keys, accounts)
- How to run each app (with pnpm Nx or standalone)
- Required accounts/services (e.g., Supabase, Vercel)

Format:
Step-by-step markdown format with command snippets.

```


# ./.cursor/rules/project-documentation-structure.rules.mdc

```mdc
---
description: 
globs: 
alwaysApply: true
---
## Documentation Workflow (Agent Action)

1.  **Domain Knowledge Capture:** When working on a feature or complex task, capture significant domain knowledge (design decisions, tricky implementation details, rationales, API usage notes, error handling strategies, configuration details) that isn't obvious from the code itself.

2.  **File Creation & Enhancement for Discoverability:**
    * **Action:** Create new Markdown (`.md`) files for this knowledge within the appropriate subfolder (e.g., under `docs/features/`, `docs/concepts/`, `docs/architecture/adr/`). Use descriptive kebab-case filenames.
    * **Action:** **Include Structured Metadata (YAML Frontmatter):** At the very **top** of EVERY new or significantly updated documentation file, include or update a YAML frontmatter block. This is critical for search and indexing:
      ```yaml
      ---
      title: "[Clear, Descriptive Title of Document]" # Human-readable title
      description: "[One-sentence summary focusing on key concepts and purpose]" # Concise explanation
      keywords: # Comprehensive list for keyword search (grep) and potential RAG indexing
        - "[primary topic]"
        - "[key technology involved, e.g., React, Vitest, Docker]"
        - "[feature name]"
        - "[related component name]"
        - "[core concept]"
        - "[synonym or alternative term]"
        - "[specific function name if relevant]"
        - "[error code if relevant]"
      related_features: ["[feature-folder-name]", "[another-feature]"] # Links to related feature doc folders (use folder names)
      related_concepts: ["[concept-folder-name]"] # Links to related concept doc folders
      related_adr: ["[adr-number]"] # Optional: Link to relevant ADRs
      last_updated: "[YYYY-MM-DD]" # Date of creation/last significant update
      # author: "[Agent/User Name - Optional]"
      ---
      ```
    * **Action:** **Write a Concise Summary/Abstract:** Immediately following the frontmatter, write a short paragraph (2-4 sentences) summarizing the document's main content and purpose. Naturally weave in the most important keywords from the frontmatter. This helps RAG context retrieval.
    * **Action:** **Use Descriptive Headings:** Structure the main document content using clear, keyword-rich Markdown headings (`##`, `###`) that accurately reflect the information in each section. This helps both human readers and semantic search.
    * **Action:** **Embed Cross-Links:** Where relevant within the main content, add explicit Markdown links (`[link text](mdc:relative/path/to/other/doc.md)` or `[link text](mdc:[root-relative-path])`) to other related documentation files within `/docs` or even specific code files/sections. This strengthens the knowledge graph for RAG.
    * **Action:** **Capture Detailed Knowledge:** Populate the rest of the file with the detailed domain knowledge, decisions, implementation notes, etc., captured in Step 1, using clear language and code blocks where appropriate.

3.  **Index Updates:** **CRITICAL:** After adding or significantly modifying a documentation file:
    * **Action:** ALWAYS update the corresponding `[foldername].index.md` file in its parent directory. Add/update the link using the `title` from the frontmatter and the `description` from the frontmatter for context.
    * **Action:** ALWAYS update the `last_updated` field in the frontmatter of the modified/created document itself.
    * **Action:** Consider if the root `docs.index.md` or higher-level indexes need updates to reflect the new content, especially for major additions. Ensure discoverability through navigation.

4.  **Review Existing Docs (Consultation):** Before creating new documentation, use the `consult-documentation-index` rule/process to check relevant index files and potentially perform searches (`grep` or semantic using keywords) to see if similar information already exists. Update existing documents rather than creating duplicates whenever practical.
```


# ./.cursor/rules/project-guidelines.rules.mdc

```mdc
---
description: 
globs: 
alwaysApply: true
---
# Rule: Auto-generate and maintain PROJECT_GUIDELINES.md

Purpose:
Document architectural decisions, naming conventions, and structure to keep the team aligned.

When to run:
- When new packages/apps are added to the monorepo
- When naming, structure, or styling conventions change
- When deployment or integration workflows are updated

Include:
- Tech stack overview (frontend, backend, DB)
- Folder structure and purpose (`apps/`, `packages/`)
- Naming conventions for files, types, and functions
- Component standards (hooks only, styled-components usage)
- Deployment strategy (Vercel, AWS, preview vs prod)

Format:
Clean markdown with collapsible sections or bullet points for quick reference.

```


# ./.cursor/rules/readme.rules.mdc

```mdc
---
description: 
globs: 
alwaysApply: true
---
# Root README Maintenance Rules
# Last Updated: 2025-04-01 06:22:55 PM EDT

## Purpose
The root `README.md` serves as the primary introduction and quick-start guide for the project. It is crucial that it accurately reflects the project's current state, core features, structure, and how to install, run, build, and test it. This rule ensures the README is considered for updates after significant changes.

## Trigger for README Update ("Major Changes")
A review and potential update of the root `README.md` MUST be considered by the agent after successfully completing tasks that involve any of the following **major changes**:

1.  **New Package/App:** Adding a new workspace package under `apps/` or `packages/`.
2.  **Major Feature Implementation:** Completing a significant, user-facing feature or core functionality update.
3.  **Build/Run/Test Command Changes:** Modifying fundamental scripts in root or workspace `package.json` files, `turbo.json`, or core config files (`vite.config.ts`, `vitest.workspace.ts`) that alter how developers interact with the project.
4.  **Installation/Setup Changes:** Adding new required dependencies, environment variables, or setup steps.
5.  **Core Architectural Shifts:** Significant refactoring that changes the project structure or how key modules interact (which might necessitate updating structure diagrams or descriptions).
6.  **Deprecation/Removal:** Removing a package or significant feature.

*Minor changes* (e.g., internal refactors, simple bug fixes, dependency bumps unless they change usage) generally do not require a root README update, although related package-level READMEs might.

## README Update Workflow (Agent Action)

When you determine that a completed task qualifies as a **major change**:

1.  **Flag Need:** Acknowledge internally or log that the `README.md` should be reviewed for potential updates.
2.  **Read Current README:** Load the full content of the root `README.md` file.
3.  **Analyze Impact & Identify Sections:** Based on the nature of the major change, determine which sections of the README are likely affected. Common sections include:
    * Project Overview / Introduction
    * Features List
    * Repository Structure / Architecture Overview
    * Prerequisites / Installation
    * Getting Started / Usage / Development Workflow
    * Available Scripts / Commands (Build, Test, Lint, etc.)
    * Configuration
    * Deployment (if applicable)
4.  **Generate Necessary Updates:** Draft clear, concise, and accurate updates for only the affected sections. Ensure commands, file paths, and descriptions are correct.
5.  **Apply Updates:** Modify the `README.md` file content with the generated updates. If unsure about the impact or wording, you may optionally present the proposed changes to the user before applying.
6.  **Log & Commit:** Report that the `README.md` has been updated. Ensure the updated `README.md` is included in the same commit or PR as the major change it documents.

## README Content Quality Guidelines

* **Accurate:** Instructions and descriptions must match the current state.
* **Clear:** Use simple language; explain necessary jargon.
* **Concise:** Provide essential information efficiently. Use lists, code blocks.
* **Up-to-Date:** Regularly review after major changes.
* **Comprehensive:** Cover key aspects needed for a developer to understand and use the project.
```


# ./.cursor/rules/tdd-tom-testing-rules.mdc

```mdc
---
description: Use this rule whenever you are starting development on any new feature to ensure it is implemented with a test-first approach using Test-Driven Development and the Test Object Model.
globs: 
---
## New Feature TDD Rule

**Description:**

**Mandatory Rule: All new features MUST be implemented using Test-Driven Development (TDD) principles.**  Prioritize tests before code, ensuring comprehensive coverage and a robust design. Tests should be focused and efficient, employing either unit or integration tests as appropriate. All tests MUST adhere to the **Test Object Model** for improved maintainability and reusability where it makes sense.

**Instructions:**

1.  **Choose the Right Testing Strategy:**
    *   **BEFORE writing any tests, deeply consider whether a UNIT test or an INTEGRATION test is most effective for the feature or component being developed.**
    *   **UNIT Tests:** Focus on individual modules or functions in isolation, mocking dependencies. Ideal for testing complex logic within a single unit.
        *   **Consider using unit tests when:**
            *   The logic within a single function or class is complex and needs thorough testing.
            *   Dependencies can be easily and realistically mocked.
            *   You need to isolate a specific unit to verify its behavior in detail.
        *   **For guidance on writing unit tests, refer to the Unit Test Writing Guide:** READ `@.brain/knowledge/testing/vitest/vitest-unit-testing.rules.ts`
    *   **INTEGRATION Tests:** Test the interaction between multiple modules or systems. They verify that different parts of the application work together correctly.
        *   **Consider using integration tests when:**
            *   The functionality depends on the interaction between multiple components, services, or external systems (e.g., databases, APIs, CLIs).
            *   Mocking is difficult, unrealistic, or overly complex.
            *   You need to ensure that different parts of the system work together correctly in a realistic environment.
        *   **For guidance on writing integration tests, refer to the Integration Test Writing Guide:** READ `@.brain/knowledge/testing/vitest/vitest-integration-testing.rules.ts`
    *   **Document the reasoning behind your choice of unit or integration testing in the code or test file.**

2.  **Start with tests:** Before writing any implementation code, create a failing test case that defines the desired behavior of the new feature, based on the chosen testing strategy.

3.  **Follow the Red-Green-Refactor cycle:**
    *   **Red:** Write a failing test (unit or integration).
    *   **Green:** Write the minimal code to make the test pass.
    *   **Refactor:** Improve code structure while keeping the test green. Be cautious about over-abstracting or introducing unnecessary complexity during refactoring. If tests get more complicated because of the refactoring, it is a code smell.
    *   **Repeat:** Move to the next part of the feature

4.  **Employ the Test Object Model (When Appropriate):**
    *   **If the Test Object Model is deemed beneficial for organization and reusability (e.g., in complex integration tests or UI tests),** create a `*.to.ts` file for each logical group of interactions or components being tested.
    *   Encapsulate interaction logic within this test object.
    *   Example:

        ```typescript
        // user-registration.to.ts
        import { UserService } from './user-service';

        export class UserRegistrationTestObject {
            private userService: UserService;

            constructor() {
                this.userService = new UserService();
            }

            async registerUser(userData: any) {
                return await this.userService.register(userData);
            }
        }
        ```
    *  **Do not force the use of the Test Object Model if it adds unnecessary complexity or doesn't provide significant value in simpler scenarios.**

5.  **Consult the detailed guidelines for comprehensive instructions:**
    *   **TDD:** READ `@.brain/knowledge/testing/vitest/vitest-tdd.rules.ts`
    *   **Test Object Model:** READ `@.brain/knowledge/testing/vitest/vitest-test-object-model.rules.ts`
    *   **Unit vs. Integration Testing:** READ `@.brain/knowledge/testing/unit-vs-integration-testing.rules.ts`

**Enforcement:** Strict (This rule must be followed without exception. The reasoning behind choosing a specific testing strategy should always be clearly documented.)
```


# ./.cursor/rules/typescript-standards.rules.mdc

```mdc
---
description: TypeScript formatting, linting rules, and best practices.
globs: ["*.ts", "*.tsx"]
alwaysApply: false
---
# TypeScript Standards
# Last Updated: 2025-03-31 10:13:02 AM

## Formatting (Prettier)
- maxLineLength: 100
- indentSize: 2
- indentStyle: space
- formatter: prettier

## Linting Rules
- noUnusedVars: error
- noUnescapedEntities: error
- noExplicitAny: warn
- noImgElement: warn
- exhaustiveDeps: warn

## Best Practices

### HTML Entities
- Use "&apos;" for apostrophes
- Use "&quot;" for quotes

### Imports
- Prefer destructuring
- Organize imports on save
- Remove unused imports

### Types
- Avoid using "any" types
- Prefer explicit types
- Use built-in utility types when possible

### Hooks
- Include all dependencies in dependency arrays
- Use useCallback for event handlers
- Use useMemo for expensive computations 
```
